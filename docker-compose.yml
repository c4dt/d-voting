services:

  init-private-key:   # create private key
    image: crypto
    build:
      dockerfile: ./Dockerfiles/Dockerfile.crypto
    volumes:
      - data:/data
    entrypoint:
      - crypto
      - bls
      - signer
      - new
      - --save
      - /data/private.key

  dela:             # DELA nodes
    image: dela
    build:
      dockerfile: ./Dockerfile.dela
      context: ./Dockerfiles
    deploy:
      replicas: ${DELA_REPLICAS}
    volumes:
      - data:/data
    depends_on:
      init-private-key:
        condition: service_completed_successfully
    ports:
      - 2000-2010:2000
      - 8080-8090:8080
      - 7080-7090:7080
    environment:
      PROXYKEY: ${PUBLIC_KEY}
      PROXYPORT: ${PROXYPORT}
      LLVL: info

  frontend:         # web service frontend
    image: frontend
    build:
      dockerfile: ./Dockerfiles/Dockerfile.frontend
    volumes:
      - data:/data
#      - ../web/frontend:/web/frontend
    ports:
      - 127.0.0.1:3000:3000
    environment:
      BACKEND_HOST: ${BACKEND_HOST}
      BACKEND_PORT: ${BACKEND_PORT}

  backend:          # web service backend
    image: backend
    build:
      dockerfile: ./Dockerfiles/Dockerfile.backend
    volumes:
      - data:/data
      - ./web/backend/src:/web/backend/src
    environment:
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_HOST: ${DATABASE_HOST}
      FRONT_END_URL: ${FRONT_END_URL}
      DELA_NODE_URL: ${DELA_NODE_URL}
      SESSION_SECRET: ${SESSION_SECRET}
      PUBLIC_KEY: ${PUBLIC_KEY}
      PRIVATE_KEY: ${PRIVATE_KEY}
    ports:
      - 127.0.0.1:5000:5000
    depends_on:
      db:
        condition: service_started

  db:               # PostgreSQL database
    image: postgres:15
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./web/backend/src/migration.sql:/docker-entrypoint-initdb.d/init.sql

volumes:
  data:             # shared by web service and DELA nodes
  postgres-data:    # PostgreSQL database
